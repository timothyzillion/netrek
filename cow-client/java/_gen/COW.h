/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jri.h"

/* Header for class COW */

#ifndef _COW_H_
#define _COW_H_

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

struct java_lang_String;
struct java_lang_Class;

/*******************************************************************************
 * Class COW
 ******************************************************************************/

typedef struct COW COW;

#define classname_COW	"COW"

#define class_COW(env) \
	((struct java_lang_Class*)JRI_FindClass(env, classname_COW))

/*******************************************************************************
 * Public Methods
 ******************************************************************************/

#ifdef DEBUG

/*** public native run (Ljava/lang/String;I)V ***/
extern JRI_PUBLIC_API(void)
COW_run(JRIEnv* env, struct COW* self, struct java_lang_String *a, jint b);

/*** public connect (Ljava/lang/String;)V ***/
extern JRI_PUBLIC_API(void)
COW_connect(JRIEnv* env, struct COW* self, struct java_lang_String *a);

#else /* !DEBUG */

/*** public native run (Ljava/lang/String;I)V ***/
#define COW_run(env, obj, a, b) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_COW_run, a, b))

/*** public connect (Ljava/lang/String;)V ***/
#define COW_connect(env, obj, a) \
	((void)JRI_CallMethod(env)(env, JRI_CallMethod_op, obj, methodID_COW_connect, a))

#endif /* !DEBUG*/

/*** public native run (Ljava/lang/String;I)V ***/
extern JRIMethodID FAR methodID_COW_run;
#define name_COW_run	"run"
#define sig_COW_run 	"(Ljava/lang/String;I)V"
#define use_COW_run(env, clazz)	\
	(methodID_COW_run =	\
		JRI_GetMethodID(env, clazz,	\
			name_COW_run,	\
			sig_COW_run))
#define unuse_COW_run(env, clazz)	\
	(methodID_COW_run = JRIUninitialized)

/*** public connect (Ljava/lang/String;)V ***/
extern JRIMethodID FAR methodID_COW_connect;
#define name_COW_connect	"connect"
#define sig_COW_connect 	"(Ljava/lang/String;)V"
#define use_COW_connect(env, clazz)	\
	(methodID_COW_connect =	\
		JRI_GetMethodID(env, clazz,	\
			name_COW_connect,	\
			sig_COW_connect))
#define unuse_COW_connect(env, clazz)	\
	(methodID_COW_connect = JRIUninitialized)

/*******************************************************************************
 * IMPLEMENTATION SECTION: 
 * Define the IMPLEMENT_COW symbol 
 * if you intend to implement the native methods of this class. This 
 * symbol makes the private and protected methods available. You should 
 * also call the register_COW routine 
 * to make your native methods available.
 ******************************************************************************/

extern JRI_PUBLIC_API(struct java_lang_Class*)
use_COW(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unuse_COW(JRIEnv* env);

extern JRI_PUBLIC_API(struct java_lang_Class*)
register_COW(JRIEnv* env);

extern JRI_PUBLIC_API(void)
unregister_COW(JRIEnv* env);

#ifdef IMPLEMENT_COW

/*******************************************************************************
 * Native Methods: 
 * These are the signatures of the native methods which you must implement.
 ******************************************************************************/

/*** public native run (Ljava/lang/String;I)V ***/
extern JRI_PUBLIC_API(void)
native_COW_run(JRIEnv* env, struct COW* self, struct java_lang_String *a, jint b);

/*******************************************************************************
 * Implementation Methods: 
 * You should only use these from within the native method definitions.
 ******************************************************************************/

#ifdef DEBUG

/*** <init> ()V ***/
extern JRI_PUBLIC_API(struct COW*)
COW_new(JRIEnv* env, struct java_lang_Class* clazz);

#else /* !DEBUG */

/*** <init> ()V ***/
#define COW_new(env, clazz)	\
	((struct COW*)JRI_NewObject(env)(env, JRI_NewObject_op, clazz, methodID_COW_new))

#endif /* !DEBUG*/

/*** <init> ()V ***/
extern JRIMethodID FAR methodID_COW_new;
#define name_COW_new	"<init>"
#define sig_COW_new 	"()V"
#define use_COW_new(env, clazz)	\
	(methodID_COW_new =	\
		JRI_GetMethodID(env, clazz,	\
			name_COW_new,	\
			sig_COW_new))
#define unuse_COW_new(env, clazz)	\
	(methodID_COW_new = JRIUninitialized)

#endif /* IMPLEMENT_COW */

#ifdef __cplusplus
} /* extern "C" */

/*******************************************************************************
 * C++ Definitions
 ******************************************************************************/

#include "netscape_plugin_Plugin.h"

struct COW : public netscape_plugin_Plugin {

	static struct java_lang_Class* _use(JRIEnv* env) {
		return use_COW(env);
	}

	static void _unuse(JRIEnv* env) {
		unuse_COW(env);
	}

	static struct java_lang_Class* _register(JRIEnv* env) {
		return register_COW(env);
	}

	static void _unregister(JRIEnv* env) {
		unregister_COW(env);
	}

	static struct java_lang_Class* _class(JRIEnv* env) {
		return class_COW(env);
	}

	/* Public Methods */
	/*** public native run (Ljava/lang/String;I)V ***/
	void run(JRIEnv* env, struct java_lang_String *a, jint b) {
		COW_run(env, this, a, b);
	}

	/*** public connect (Ljava/lang/String;)V ***/
	void connect(JRIEnv* env, struct java_lang_String *a) {
		COW_connect(env, this, a);
	}

#ifdef IMPLEMENT_COW

#endif /* IMPLEMENT_COW */
};

#endif /* __cplusplus */

#endif /* Class COW */
